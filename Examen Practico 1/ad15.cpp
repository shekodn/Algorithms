// NOMBRE:
// MATRICULA:


#include <cstdlib>
#include <iostream>

using namespace std;

const int N = 21;

int datos1[300] = {50193, 50668, 51264, 51273, 52162, 52420, 52742, 52760, 53147, 53354, 54009, 54428, 54458, 54498, 54691, 54704, 54820, 55167, 55479, 55617, 55760, 55796, 55814, 55987, 56004, 56588, 56627, 57199, 57212, 58527, 58987, 59187, 59885, 60247, 60320, 60509, 61084, 61146, 62114, 62305, 62306, 62838, 63145, 63192, 63197, 63666, 64049, 64334, 64620, 64631, 65011, 65170, 65454, 65579, 65666, 66120, 66729, 67550, 68173, 68652, 68726, 69294, 69348, 69564, 69718, 70124, 70485, 71084, 71157, 71305, 71659, 72673, 73290, 73493, 73671, 74181, 74588, 74711, 74864, 74882, 75388, 76487, 77202, 77253, 77723, 79479, 79821, 79825, 79966, 80319, 80553, 80590, 81319, 81499, 81930, 81972, 82703, 83078, 83263, 84089, 84937, 85926, 86140, 86260, 86571, 86717, 86814, 86828, 86886, 87843, 87886, 88209, 88824, 88825, 89244, 89673, 89807, 89847, 90123, 90222, 90527, 90825, 91530, 91533, 92461, 92595, 92688, 93192, 93431, 93474, 93936, 94122, 94245, 94254, 95008, 95344, 96368, 96431, 96730, 96830, 97262, 98031, 98152, 98214, 98462, 98733, 1097, 1287, 2221, 2594, 2992, 3695, 4102, 4369, 4573, 4663, 4704, 4796, 4833, 5311, 6455, 6669, 7006, 7461, 8258, 8615, 8935, 9171, 10016, 10019, 10196, 10286, 10410, 10731, 10941, 11028, 11412, 11933, 12737, 12788, 13395, 13809, 14708, 14711, 14883, 14911, 15058, 15063, 15144, 15311, 15636, 15907, 16584, 16793, 16902, 17125, 18408, 18534, 18818, 18848, 19061, 19123, 19668, 20264, 20428, 20816, 20988, 21028, 21481, 21758, 22000, 22381, 22709, 23257, 24107, 24193, 24367, 24791, 24883, 25081, 25851, 26543, 27207, 27412, 27636, 27668, 27919, 28488, 28605, 29213, 29253, 30362, 30513, 30679, 30937, 31237, 31722, 32554, 32795, 33101, 33333, 33447, 33907, 34392, 34394, 34529, 35000, 35033, 35363, 35487, 35860, 35939, 36192, 36195, 36714, 36731, 37564, 37575, 37825, 38123, 38211, 38484, 38785, 38900, 39102, 40647, 40775, 41718, 42000, 42161, 42381, 42803, 42859, 43335, 43512, 43988, 44198, 44459, 44869, 44988, 45003, 45004, 45036, 45379, 45941, 46128, 46308, 46578, 46855, 47267, 47634, 47743, 48271, 48618, 48751, 49537, 49799, 49859, 50117, 50135};
int datos2[300] = {98733, 1097, 1287, 2221, 2594, 2992, 3695, 4102, 4369, 4573, 4663, 4704, 4796, 4833, 5311, 6455, 6669, 7006, 7461, 8258, 8615, 8935, 9171, 10016, 10019, 10196, 10286, 10410, 10731, 10941, 11028, 11412, 11933, 12737, 12788, 13395, 13809, 14708, 14711, 14883, 14911, 15058, 15063, 15144, 15311, 15636, 15907, 16584, 16793, 16902, 17125, 18408, 18534, 18818, 18848, 19061, 19123, 19668, 20264, 20428, 20816, 20988, 21028, 21481, 21758, 22000, 22381, 22709, 23257, 24107, 24193, 24367, 24791, 24883, 25081, 25851, 26543, 27207, 27412, 27636, 27668, 27919, 28488, 28605, 29213, 29253, 30362, 30513, 30679, 30937, 31237, 31722, 32554, 32795, 33101, 33333, 33447, 33907, 34392, 34394, 34529, 35000, 35033, 35363, 35487, 35860, 35939, 36192, 36195, 36714, 36731, 37564, 37575, 37825, 38123, 38211, 38484, 38785, 38900, 39102, 40647, 40775, 41718, 42000, 42161, 42381, 42803, 42859, 43335, 43512, 43988, 44198, 44459, 44869, 44988, 45003, 45004, 45036, 45379, 45941, 46128, 46308, 46578, 46855, 47267, 47634, 47743, 48271, 48618, 48751, 49537, 49799, 49859, 50117, 50135, 50193, 50668, 51264, 51273, 52162, 52420, 52742, 52760, 53147, 53354, 54009, 54428, 54458, 54498, 54691, 54704, 54820, 55167, 55479, 55617, 55760, 55796, 55814, 55987, 56004, 56588, 56627, 57199, 57212, 58527, 58987, 59187, 59885, 60247, 60320, 60509, 61084, 61146, 62114, 62305, 62306, 62838, 63145, 63192, 63197, 63666, 64049, 64334, 64620, 64631, 65011, 65170, 65454, 65579, 65666, 66120, 66729, 67550, 68173, 68652, 68726, 69294, 69348, 69564, 69718, 70124, 70485, 71084, 71157, 71305, 71659, 72673, 73290, 73493, 73671, 74181, 74588, 74711, 74864, 74882, 75388, 76487, 77202, 77253, 77723, 79479, 79821, 79825, 79966, 80319, 80553, 80590, 81319, 81499, 81930, 81972, 82703, 83078, 83263, 84089, 84937, 85926, 86140, 86260, 86571, 86717, 86814, 86828, 86886, 87843, 87886, 88209, 88824, 88825, 89244, 89673, 89807, 89847, 90123, 90222, 90527, 90825, 91530, 91533, 92461, 92595, 92688, 93192, 93431, 93474, 93936, 94122, 94245, 94254, 95008, 95344, 96368, 96431, 96730, 96830, 97262, 98031, 98152, 98214, 98462};

int datos3[7][7] =
   {{0, 0, 0, 1, 0, 0, 0},
    {0, 0, 0, 0, 1, 0, 0},
    {0, 0, 0, 0, 0, 1, 0},
    {0, 0, 0, 0, 0, 0, 1},
    {0, 0, 1, 0, 0, 0, 0},
    {0, 1, 0, 0, 0, 0, 0},
    {1, 0, 0, 0, 0, 0, 0}};

	int datos31[5][5] =
	   {{0, 1, 0, 1, 0},
	    {0, 0, 1, 0, 1},
	    {1, 0, 0, 1, 0},
	    {0, 0, 0, 0, 1},
	    {0, 0, 1, 0, 0}};

int datos4[N] = {8, 19, 4, 16, 18, 3, 5, 19, 17, 3, 2, 7, 8, 9, 11, 6, 16, 12, 4, 15, 11};
int datos41[N] = {2,3,4,5,6,7,8,7,6,5};
int datos42[6] = {6,6,6,6,6,6};



// Problema 1
// Escribe aqui la implementaci�n de las funciones del problema 1

int busqueda(int arr[], int inicio, int fin){

	///*
	int mitad = (inicio + fin)/2;
    int indice;
    int comparaciones = 0;

    if(inicio > fin){
        comparaciones++;
        return -1;

    }

    else{

		//cout << mitad << " " << arr[mitad] << endl;

        if(arr[mitad-1] > arr[mitad]){
            comparaciones++;
			return mitad;
        }

		else if (arr[mitad] > arr[mitad + 1]){

            comparaciones++;
			return mitad + 1;
		}


        else {

			//if(arr[mitad] < arr[fin] && arr[mitad] > arr[inicio]){
			if(arr[mitad] < arr[inicio]){

            	indice = busqueda(arr, inicio, mitad - 1);
                comparaciones++;

        	}

        	else{
            	indice = busqueda(arr, mitad + 1, fin);
                comparaciones++;

        	}
    	}

        cout << "Comparaciones " << comparaciones << endl;

	return indice;

	}
	//*/

	/*

	int finIni=fin;
    while (inicio<=fin)
    {
        int mitad=(inicio+fin)/2;
        if(arr[mitad]>arr[mitad+1])
            return (mitad+1)%300;
        if(arr[inicio]>arr[mitad])
            fin=mitad-1;
        else
            inicio=mitad+1;
    }
	*/
}


// Problema 2
// Algoritmo de Floyd

int min(int a,int b)
{
    if(a<b)
        return(a);
    return(b);
}

int maximo(int a,int b)
{
    if(a>b)
        return(a);
    return(b);
}

void floyd(int p[7][7],int n){

/* solucion 1
	for(int k=0;k<n;k++){
		for(int i=0;i<n;i++){
			for(int j=0;j<n;j++){
				if(i != j){
					p[i][j]=max(p[i][j],p[i][k]*p[k][j]);
				}
			}
		}
	}
*/

//solucion 2 - esta es mas eficiente
	for(int k=0; k<n; k++)
        for(int i=0; i<n; i++)
            for(int j=0; j<n; j++)
				if (i != j)
					p[i][j]= p[i][j] || (p[i][k]&&p[k][j]);

}

void printArr(int p[7][7]){

	int n =7;

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cout << p[i][j];
		}

		cout << endl;
	}
}

void printArr5(int p[5][5]){

	int n =5;

	for(int i=0;i<n;i++){
		for(int j=0;j<n;j++){
			cout << p[i][j];
		}


		cout << endl;
	}
}

// Problema 3
// Algoritmo de Godbole
int minimo(int i, int j, int D[N][N], int d[N])
{
	int minimo;
	minimo = 99999;

	for(int k = i; k < j; k++){

		if(D[i][k] + D[k+1][j] + (d[i-1]*d[k]*d[j]) < minimo){

			minimo = D[i][k] + D[k+1][j] + (d[i-1] * d[k] * d[j]);
		}

	}

	return minimo;
}

int godbole (int d[N], int n)
{
    int D[N][N]; // se considera que no se usar� el sub�ndice 0 y que se utilizar� el sub�ndice n en la matriz
    int j;

    for (int i = 1; i<= n; i++) D[i][i] = 0;
    for (int diag = 1; diag <= n-1; diag++)
        for (int i = 1; i <= n-diag; i++)
        {
            j = i+diag;
            D[i][j] = minimo(i,j,D,d);
            //calcula el valor m�nimo entre los diversos valores de: D[i,k] + D[k+1, j] + d[i-1]*d[k]*d[j]  para k desde i hasta j-1
        }
    return D[1][n];
}

int main()
{
    //Escribe aqui las llamadas para probar y responder preguntas del examen

    int arr0[5] = {2,4,6,8,10};
	int arr1[5] = {10,2,4,6,8};
	int arr2[5] = {8,10,2,4,6};
	int arr3[5] = {6,8,10,2,4};
	int arr4[5] = {4,6,8,10,2};

	//cout << busqueda(arr0, 0, 4) << endl;
	//cout << busqueda(datos1, 0, 299) << endl;
	//cout << busqueda(datos2, 0, 299) << endl;

	//cout << busqueda(arr2, 0, 4) << endl;
	//cout << busqueda(arr3, 0, 4) << endl;
	//cout << busqueda(arr4, 0, 4) << endl;

	/*
	printArr(datos3);
	floyd(datos3,7);
	cout << endl;
	printArr(datos3);
	*/

	cout<<godbole(datos42, 5);




}
